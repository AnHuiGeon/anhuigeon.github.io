{"version":3,"file":"component---src-pages-category-list-js-cd8003cee5c1fe69917d.js","mappings":"iKAKA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC/BC,GAASC,EAAAA,EAAAA,IAAe,aAAxBD,KAeFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACC,gBAAC,IAAD,CACCO,eAAgB,CACfN,KAAAA,GAEDC,MAAOA,EACPH,KAAM,CACL,CACCS,KAAK,cACLC,QAASJ,GAEN,CACEK,SAAS,WACTD,QAASP,GAEX,CACEQ,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKG,aAAaK,QAE7B,CACEH,KAAK,gBACLC,QAASP,GAEX,CACEM,KAAK,sBACLC,QAASJ,IAEXO,OAAOb,KAKfD,EAAIe,aAAe,CAClBZ,KAAK,KACLF,KAAM,GACNC,YAAY,IAUb,O,8DC/DA,UAXqB,SAAC,GAA2B,IAAzBc,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAGnC,OAFAC,QAAQC,IAAI,qBAAqBF,GACjCC,QAAQC,IAAI,4BAA6BH,GAEvC,gBAAC,UAAD,CAAWC,KAAMA,GACf,gBAAC,IAAD,MACA","sources":["webpack://anhuigeon.github.io/./src/components/seo.js","webpack://anhuigeon.github.io/./src/pages/categoryList.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ meta, description, lang, title }) {\n\tconst { site } = useStaticQuery(\n\t\tgraphql`\n\t\t\tquery {\n\t\t\t\tsite {\n\t\t\t\t\tsiteMetadata {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tdescription\n\t\t\t\t\t\tauthor\n\t\t\t\t\t\tsiteUrl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t`\n\t)\n\n\tconst metaDescription = description || site.siteMetadata.description\n\n\treturn (\n\t\t<Helmet\n\t\t\thtmlAttributes={{\n\t\t\t\tlang,\n\t\t\t}}\n\t\t\ttitle={title}\n\t\t\tmeta={[\n\t\t\t\t{\n\t\t\t\t\tname: `description`,\n\t\t\t\t\tcontent: metaDescription,\n\t\t\t\t},\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n\t\t/>\n\t)\n}\n\nSeo.defaultProps = {\n\tlang: `ko`,\n\tmeta: [],\n\tdescription: ``,\n}\n\nSeo.propTypes = {\n\tdescription: PropTypes.string,\n\tlang: PropTypes.string,\n\tmeta: PropTypes.arrayOf(PropTypes.object),\n\ttitle: PropTypes.string.isRequired,\n}\n\nexport default Seo\n\n// https://www.gatsbyjs.com/docs/add-seo-component/\n    // SEO 구성 요소 추가, gatsby-config.js, SEO 구성 요소\n// https://www.gatsbyjs.com/docs/how-to/adding-common-features/seo/\n    // 서버 렌더링 확인, 속도 향상, 페이지 메타데이터, 구조화된 데이터를 사용하여 검색 엔진에서 리치 스니펫 생성\n// https://www.gatsbyjs.com/tutorial/seo-and-social-sharing-cards-tutorial/\n    // gatsby를 사용한 검색 엔진 최적화(SEO) 및 소셜 공유 카드\n// https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n    // useStaticQuery Hook을 사용하여 구성 요소의 데이터 쿼리","import React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport Seo from \"../components/seo\"\nimport IndexPage from \"./index\";\n\nconst CategoryList = ({ pageContext, data }) => {\n  console.log('categoryList data:',data)\n  console.log('categoryList pageContext:', pageContext)\n  return (\n    <IndexPage data={data}>\n      <Seo/>\n      <div>CategoryList</div>\n    </IndexPage>\n  )\n}\n\nexport default CategoryList\n\nexport const pageQuery = graphql`\nquery {\n  site {\n    siteMetadata {\n      title\n      author\n      description\n      social {\n        twitter\n        facebook\n        linkedin\n        github\n        instagram\n        email\n      }\n    }\n  }\n  tagsGroup: allMarkdownRemark {\n    group(field: frontmatter___tags) {\n      totalCount\n    }\n  }\n  categoriesGroup: allMarkdownRemark {\n    group(field: frontmatter___categories) {\n      fieldValue\n      totalCount\n    }\n  }\n}\n`\n// export const pageQuery = graphql`\n// query CategoryPostBySlug($category: String) {\n//     site {\n//         siteMetadata {\n//             title\n//         }\n//     }\n//     allMarkdownRemark(\n//         limit: 2000\n//         sort: { fields: [frontmatter___date], order: DESC }\n//         filter: { frontmatter: { categories: { in: [$category] } } }\n//     ) {\n//         totalCount\n//         edges {\n//             node {\n//                 excerpt\n//                 fields {\n//                     slug\n//                 }\n//                 timeToRead\n//                 frontmatter {\n//                     date(formatString: \"MMMM DD, YYYY\")\n//                     title\n//                     categories\n//                     img {\n//                         childImageSharp {\n//                             gatsbyImageData(placeholder: BLURRED,\n//                                 layout: FULL_WIDTH,\n//                                 formats: [AUTO, AVIF, WEBP])\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n// }\n// `"],"names":["Seo","meta","description","lang","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","name","content","property","author","concat","defaultProps","pageContext","data","console","log"],"sourceRoot":""}