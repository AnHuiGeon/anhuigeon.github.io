{"version":3,"file":"component---src-templates-category-list-js-a9816e483a071a4e0e11.js","mappings":"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","sources":["webpack://anhuigeon.github.io/./src/components/posts/postCard.js","webpack://anhuigeon.github.io/./src/components/posts/postPagination.js","webpack://anhuigeon.github.io/./src/components/posts/postList.js","webpack://anhuigeon.github.io/./src/components/seo.js","webpack://anhuigeon.github.io/./src/templates/categoryList.js"],"sourcesContent":["import { Link } from \"gatsby\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst PostCard = ({node}) => {\n  return (\n    <PostBox>\n      <Link to={'/'+node.frontmatter.categories+node.fields.slug} >\n        <ImgBox>\n        {node.frontmatter.img &&\n          node.frontmatter.img.childImageSharp &&\n          node.frontmatter.img.childImageSharp.gatsbyImageData\n          ?<ImgContent\n            style={{\n              backgroundImage: `url(${node.frontmatter.img.childImageSharp.gatsbyImageData.images.fallback.src})`,\n            }}></ImgContent>\n          :<ImgContent>no image</ImgContent>\n        }\n        </ImgBox>\n        <TextBox>\n          <Texts>제목: {node.frontmatter.title}</Texts>\n          <Texts>분류: {node.frontmatter.categories}</Texts>\n          <Texts>날짜: {node.frontmatter.date}</Texts>\n        </TextBox>\n      </Link>\n    </PostBox>\n  )\n}\n\nexport default PostCard\nconst ImgContent = styled.div`\n  width: 100%;\n  height: 20vh;\n  text-align: center;\n  line-height: 20vh;\n  background-size: 101% 100%;\n  background-repeat: no-repeat;\n  background-color: var(--color-background-3);\n  color: var(--color-text);\n  transition: .3s;\n`;\nconst ImgBox = styled.div`\n  overflow: hidden;\n  transition: 0.3s;\n`;\nconst Texts = styled.div`\n  padding: 1% 1% 0 1%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`;\nconst TextBox = styled.div`\n  padding: 1%;\n  background-color: var(--color-background-2);\n`;\nconst PostBox = styled.div`\n  border-radius: 5%;\n  overflow: hidden;\n  margin: 1%;\n  width: 48%;\n  height: 30%;\n  &:hover{\n    ${ImgBox} {\n      z-index: 10;\n      opacity: 0.8;\n    }\n    ${ImgContent} {\n    transform: scale(1.05);\n  }\n}\n`;","import React, {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\n\nconst PostPagination = ({pageContext}) => {\n  const [currentPage] = useState(pageContext.currentPage)\n  const [numPages] = useState(pageContext.numPages)\n  const [pagination, setPagination] = useState([])\n  useEffect(() => {\n    let leftArr = []\n    let rightArr = []\n\n    for(let i = 1; i <= 5; i++){\n      if(currentPage-i > 0){\n        leftArr.unshift(currentPage-i)\n      }\n      if(currentPage+i <= numPages){\n        rightArr.push(currentPage+i)\n      }\n    }\n\n    leftArr.push(currentPage)\n\n    setPagination(pagination => pagination.concat(leftArr).concat(rightArr))\n  }, []);\n  let pathname = typeof window !== \"undefined\" ? window.location.pathname : \"\"\n  if(pathname.split(\"/\").slice(-1)[0] !== \"\"){\n    pathname = pathname.slice(0, -1)\n  }\n\n  return (\n    <Pagination>\n      {pagination.map(( page ) => (\n        // why we've to include 'key'?\n        // => Each child in a list should have a unique \"key\" prop.\n        <List key={page}>\n          {page === 1\n            ?<Link\n              style={{fontWeight:(page === currentPage)?700:500,\n                      fontSize: (page === currentPage)?22:19}}\n              to={`${pathname}`}>\n              {page}\n              </Link>\n            :<Link\n              style={{fontWeight:(page === currentPage)?700:500,\n                      fontSize: (page === currentPage)?22:19}}\n              to={`${pathname}${page}`}>\n              {page}\n            </Link>\n          }\n        </List>\n      ))}\n    </Pagination>\n  )\n}\n\nconst List = styled.div`\n  display: inline-block;\n  width: fit-content;\n  padding: 0 3px;\n  height: 30px;\n  line-height: 200%;\n`;\nconst Pagination = styled.div`\n  display: flex;\n  height: 30px;\n  flex-direction: row;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default PostPagination","import React from \"react\";\nimport styled from \"styled-components\";\nimport PostCard from \"./postCard\";\nimport PostPagination from \"./postPagination\";\n\nimport { device } from \"../../styles/device\";\n\nconst PostList = ({allData, pageContext}) => {\n  return (\n    <Container>\n      {allData.map(({ node }) => \n        <PostCard node={node} key={node.fields.slug}/>\n        // why we've to include 'key'?\n        // => Each child in a list should have a unique \"key\" prop.\n      )}\n      <PostPagination pageContext={pageContext} />\n    </Container>\n  )\n}\n\nexport default PostList\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 98%;\n  height: fit-content;\n  margin: 1%;\n  @media ${device.desktop}{\n  }\n  @media ${device.laptop}{\n  }\n  @media ${device.tablet}{\n  }\n  @media ${device.mobile}{\n  }\n`;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ meta, description, lang, title }) {\n\tconst { site } = useStaticQuery(\n\t\tgraphql`\n\t\t\tquery {\n\t\t\t\tsite {\n\t\t\t\t\tsiteMetadata {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tdescription\n\t\t\t\t\t\tauthor\n\t\t\t\t\t\tsiteUrl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t`\n\t)\n\n\tconst metaDescription = description || site.siteMetadata.description\n\n\treturn (\n\t\t<Helmet\n\t\t\thtmlAttributes={{\n\t\t\t\tlang,\n\t\t\t}}\n\t\t\ttitle={title}\n\t\t\tmeta={[\n\t\t\t\t{\n\t\t\t\t\tname: `google-site-verification`,\n\t\t\t\t\tcontent: 'rvfbJtwRoRF0W7YEmxwXRYE3bX4SC4DrYAwy8SbtEd8',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: `description`,\n\t\t\t\t\tcontent: metaDescription,\n\t\t\t\t},\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n\t\t/>\n\t)\n}\n\nSeo.defaultProps = {\n\tlang: `ko`,\n\tmeta: [],\n\tdescription: ``,\n}\n\nSeo.propTypes = {\n\tdescription: PropTypes.string,\n\tlang: PropTypes.string,\n\tmeta: PropTypes.arrayOf(PropTypes.object),\n\ttitle: PropTypes.string.isRequired,\n}\n\nexport default Seo\n\n// https://www.gatsbyjs.com/docs/add-seo-component/\n    // SEO 구성 요소 추가, gatsby-config.js, SEO 구성 요소\n// https://www.gatsbyjs.com/docs/how-to/adding-common-features/seo/\n    // 서버 렌더링 확인, 속도 향상, 페이지 메타데이터, 구조화된 데이터를 사용하여 검색 엔진에서 리치 스니펫 생성\n// https://www.gatsbyjs.com/tutorial/seo-and-social-sharing-cards-tutorial/\n    // gatsby를 사용한 검색 엔진 최적화(SEO) 및 소셜 공유 카드\n// https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n    // useStaticQuery Hook을 사용하여 구성 요소의 데이터 쿼리","import React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport Seo from \"../components/seo\"\nimport PostList from \"../components/posts/postList\";\n\nconst CategoryList = ({ pageContext, data }) => {\n  return (\n    <>\n      <Seo title={data.site.siteMetadata.title}/>\n      <PostList allData={data.allMarkdownRemark.edges} pageContext={pageContext} />\n    </>\n  )\n}\n\nexport default CategoryList\n\nexport const pageQuery = graphql`\nquery CategoryPostBySlug($category: String, $skip: Int, $limit: Int) {\n  site {\n    siteMetadata {\n      title\n    }\n  }\n  allMarkdownRemark(\n    sort: { fields: [frontmatter___date], order: DESC }\n    limit: $limit\n    skip: $skip\n    filter: { frontmatter: { categories: { in: [$category] } } }\n  ) {\n    totalCount\n    edges {\n      node {\n        excerpt\n        fields {\n          slug\n        }\n        timeToRead\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          categories\n          img {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED,\n                layout: FULL_WIDTH,\n                formats: [AUTO, AVIF, WEBP])\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`"],"names":["node","PostBox","to","frontmatter","categories","fields","slug","ImgBox","img","childImageSharp","gatsbyImageData","ImgContent","style","backgroundImage","images","fallback","src","TextBox","Texts","title","date","styled","List","Pagination","pageContext","currentPage","useState","numPages","pagination","setPagination","useEffect","leftArr","rightArr","i","unshift","push","concat","pathname","window","location","split","slice","map","page","key","fontWeight","fontSize","allData","Container","device","Seo","meta","description","lang","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","name","content","property","author","defaultProps","data","allMarkdownRemark","edges"],"sourceRoot":""}